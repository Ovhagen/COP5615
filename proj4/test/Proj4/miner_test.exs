defmodule Proj4.MinerTest do
  use ExUnit.Case
  @moduledoc """
  This module defines a test for operations and functions in 'miner.ex'.
  """

  setup do
    # miners = [:miner1, :miner2]
    # |> Enum.map(fn node ->
    # %{
    #   id: node,
    #   start: {
    #     Proj4.MinerNode,
    #     :start_link,
    #     [%{
    #       block_list: [],
    #       tx_list: [],
    #
    #     }]
    #   }
    # }
    # end)
    %{
      tx_test: ["c5246e478e0a319c099f94fe8e5b8c7b767a017f55408ebde477d0578659b4a8",  #Transactions gathered by a miner.
                  "9ac0240b5e74ebaf38efa72e105cfeb06ee119dae56954dbd4f76cd790c738a5",
                  "f25a13422d5cc7bb4331607502360cba53ceb6977623b3b4759fe96e42fdb1c8",
                  "ce249be4a7f827ebccf51beb3d4cc919ee03b2aa51e4a3444142568d46a31a8a"],
    prev_hash: [MerkleTree.hash("test")],  #Taken from the previous block in the chain
    nonce: 1  #This would be generated by the miner
	 }
  end

  @doc """
  This test makes sure a block can be successfully mined within a decent difficulty range of a couple of seconds.
  The test performs 100,000 rounds of nonce increments to find a hash.
  """
  test "Successfully create a block hash in difficulty range", %{tx_test: tx_test, prev_hash: prev_hash, nonce: nonce} do
    tree = MerkleTree.makeMerkle(tx_test)
    block = Block.createBlock(tx_test, tree.root.hash_value, prev_hash, nonce)
    |> Miner.mine_block(nonce, 100000)  #Finds a block in a couple of seconds
    assert(block != nil)
  end

  @doc """
  Tests that a mining round can fail the difficulty requirement. The mining is done with 1000 nonce increments,
  which in this case is not enough to satisfy the global block difficulty.
  """
  test "Fail a round of block mining", %{tx_test: tx_test, prev_hash: prev_hash, nonce: nonce} do
    tree = MerkleTree.makeMerkle(tx_test)
    block = Block.createBlock(tx_test, tree.root.hash_value, prev_hash, nonce)
    |> Miner.mine_block(nonce, 1000)
    assert(block == nil)
  end


end
